"""test

Revision ID: afeae79e96c9
Revises: 4bf873ec75e4
Create Date: 2024-11-14 16:54:38.621744

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'afeae79e96c9'
down_revision = '4bf873ec75e4'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Drop foreign key constraints before dropping tables
    op.drop_constraint('exams_created_by_fkey', 'exams', type_='foreignkey')
    op.drop_constraint('attendances_user_id_fkey', 'attendances', type_='foreignkey')
    op.drop_constraint('password_reset_requests_user_id_fkey', 'password_reset_requests', type_='foreignkey')
    op.drop_constraint('exam_submissions_student_id_fkey', 'exam_submissions', type_='foreignkey')

    # Drop indexes associated with the tables
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    
    # Drop the tables in the correct order
    op.drop_table('exam_submissions')
    op.drop_table('exams')
    op.drop_table('attendances')
    op.drop_table('password_reset_requests')
    op.drop_table('subjects')
    op.drop_table('classes')
    op.drop_table('users')


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Recreate the 'users' table first
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('passcode', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('username', name='users_username_key')
    )
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)

    # Recreate the 'exams' table
    op.create_table('exams',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('exams_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('subject_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('class_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['class_id'], ['classes.id'], name='exams_class_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='exams_created_by_fkey'),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='exams_subject_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='exams_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_exams_id', 'exams', ['id'], unique=False)

    # Recreate the 'password_reset_requests' table
    op.create_table('password_reset_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reset_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expiry_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='password_reset_requests_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='password_reset_requests_pkey')
    )
    op.create_index('ix_password_reset_requests_id', 'password_reset_requests', ['id'], unique=False)

    # Recreate the 'subjects' table
    op.create_table('subjects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('subjects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='subjects_pkey'),
    sa.UniqueConstraint('name', name='subjects_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_subjects_id', 'subjects', ['id'], unique=False)

    # Recreate the 'attendances' table
    op.create_table('attendances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('clock_in', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('clock_out', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('hours_worked', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='attendances_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='attendances_pkey')
    )
    op.create_index('ix_attendances_id', 'attendances', ['id'], unique=False)

    # Recreate the 'classes' table
    op.create_table('classes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('classes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='classes_pkey'),
    sa.UniqueConstraint('name', name='classes_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_classes_id', 'classes', ['id'], unique=False)

    # Recreate the 'exam_submissions' table
    op.create_table('exam_submissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('exam_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('answers', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('marks', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exam_id'], ['exams.id'], name='exam_submissions_exam_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], name='exam_submissions_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='exam_submissions_pkey')
    )
    op.create_index('ix_exam_submissions_id', 'exam_submissions', ['id'], unique=False)

    # ### end Alembic commands ###
